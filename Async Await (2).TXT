/*let p = new Promise((resolve, reject) => {
  let a = 1 + 1;
  if (a == 2) {
    resolve("Success");
  } else {
    reject("Failed");
  }
});
p.then(message => {
  console.log("This is in then " + message);
}).catch(message => {
  console.log("This is in catch " + message);
});
*/

/*
    
    ///CALLBACK EXAMPLE

 const userLeft = false;
 const userWatchingCatMeme = false;

 function watchTutorialCallback(callback, errorCallback) {
   if (userLeft) {
     errorCallback({
       name: "User Left",
       message: ":("
     });
   } else if (userWatchingCatMeme) {
     errorCallback({
       name: "User watching Cat Meme",
       message: "webdev simplified < cat"
     });
   } else {
     callback({
       message: "Thumbs up and subscribe"
     });
   }
 }
 watchTutorialCallback(
   success => {
     console.log(success.message);
   },
   error => {
     console.log(error.name + "    " + error.message);
   }
 );
 */

/*
   //PROMISE EXAMPLE

const userLeft = false;
const userWatchingCatMeme = false;

function watchTutorialPromise() {
  return new Promise((resolve, reject) => {
    if (userLeft) {
      reject({
        name: "User Left",
        message: ":("
      });
    } else if (userWatchingCatMeme) {
      reject({
        name: "User watching Cat Meme",
        message: "webdev simplified < cat"
      });
    } else {
      resolve({
        message: "Thumbs up and subscribe"
      });
    }
  });
}

watchTutorialPromise()
  .then(success => {
    console.log(success.message);
  })
  .catch(error => {
    console.log(error.name + "    " + error.message);
  });

*/
/*
//     PROMISE ALL

const recordVideoOne = new Promise((resolve, reject) => {
  resolve("Video 1 Recorded");
});

const recordVideoTwo = new Promise((resolve, reject) => {
  resolve("Video 2 Recorded");
});

const recordVideoThree = new Promise((resolve, reject) => {
  resolve("Video 3 Recorded");
});

Promise.all([recordVideoOne, recordVideoTwo, recordVideoThree]).then(
  message => {
    console.log(message);
  }
);
*/

/*

// AYSN AWAIT

function makeRequest(location) {
  return new Promise((resolve, reject) => {
    console.log(`making request to ${location}`);
    if (location === "google") {
      resolve("google say hi");
    } else {
      reject("We cannot talk to google");
    }
  });
}
function processRequest(response) {
  return new Promise((resolve, reject) => {
    console.log("Processing response");
    resolve(`Extra Information + ${response}`);
  });
}

// makeRequest("google")
//   .then(response => {
//     console.log("Response Received");
//     return processRequest(response);
//   })
//   .then(processResponse => {
//     console.log(processResponse);
//   })
//   .catch(err => {
//     console.log(err);
//   });

async function doWork() {
  try {
    const response = await makeRequest("facebook");
    console.log("response received");
    const processResponse = await processRequest(response);
    console.log(processResponse);
  } catch (err) {
    console.log(err);
  }
}
doWork();

*/
